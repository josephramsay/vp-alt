---
apiVersion: v1
kind: ConfigMap
metadata:
  name: properties-trino2
  namespace: default
data:
  node.properties.template: |
  {{ .Files.Get "node.properties.template" | indent 4 }}
  jvm.config: | 
  {{ .Files.Get "jvm.config" | indent 4 }}
  config.properties.template: | 
  {{ .Files.Get "config.properties.template" | indent 4 }}
  log.properties: |
  {{ .Files.Get "log.properties" | indent 4 }}
  hive.properties: |
  {{ .Files.Get "catalog/hive.properties" | indent 4 }}
  postgresql.properties: |
  {{ .Files.Get "catalog/postgresql.properties" | indent 4 }}
  thrift.properties: |
  {{ .Files.Get "catalog/thrift.properties" | indent 4 }}
  core-site.xml: |
  {{ .Files.Get "catalog/core-site.xml" | indent 4 }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: trino2-coordinator
  name: trino2-coordinator
  namespace: default
spec:
  serviceName: "trino2-coordinator"
  replicas: 1
  selector:
    matchLabels:
      app: trino2-coordinator
  template:
    metadata:
      labels:
        app: trino2-coordinator
    spec:
      nodeSelector:
        kubernetes.io/arch: amd64
        role: trino
      volumes:
        - name: properties-vol
          configMap:
            name: properties-trino2
        - name: pre-install
          emptyDir: {}
        - name: mem
          emptyDir:
            medium: "Memory"
            sizeLimit: 1G
      terminationGracePeriodSeconds: 10
      initContainers:
      - name: copy-ro-scripts
        image: busybox
        command:
          - sh
          - -c
          - |
            cp /conf/node.properties.template /opt/trino/conf/ &&
            cp /conf/jvm.config /opt/trino/conf/ &&
            cp /conf/config.properties.template /opt/trino/conf/ &&
            mkdir -p /opt/trino/conf/catalog &&
            cp /conf/hive.properties /opt/trino/conf/catalog &&
            cp /conf/postgresql.properties /opt/trino/conf/catalog &&
            cp /conf/thrift.properties /opt/trino/conf/catalog &&
            cp /conf/core-site.xml /opt/trino/conf/catalog &&
            sed -i "s#__S3_ACCESS_KEY_ID#$S3_ACCESS_KEY_ID#g"  /opt/trino/conf/catalog/core-site.xml &&
            sed -i "s#__S3_ACCESS_KEY_SECRET#$S3_ACCESS_KEY_SECRET#g"  /opt/trino/conf/catalog/core-site.xml &&
            sed -i "s#__S3_ACCESS_KEY_ID#$S3_ACCESS_KEY_ID#g"  /opt/trino/conf/catalog/hive.properties &&
            sed -i "s#__S3_ACCESS_KEY_SECRET#$S3_ACCESS_KEY_SECRET#g"  /opt/trino/conf/catalog/hive.properties &&
            sed -i "s#__S3_ACCESS_KEY_ID#$S3_ACCESS_KEY_ID#g"  /opt/trino/conf/catalog/postgresql.properties &&
            sed -i "s#__S3_ACCESS_KEY_SECRET#$S3_ACCESS_KEY_SECRET#g"  /opt/trino/conf/catalog/postgresql.properties &&
            sed -i "s#__S3_ACCESS_KEY_ID#$S3_ACCESS_KEY_ID#g"  /opt/trino/conf/catalog/thrift.properties &&
            sed -i "s#__S3_ACCESS_KEY_SECRET#$S3_ACCESS_KEY_SECRET#g"  /opt/trino/conf/catalog/thrift.properties &&
            echo 'connector.name=tpch' > /opt/trino/conf/catalog/tpch.properties
        volumeMounts:
          - name: properties-vol
            mountPath: /conf
          - name: pre-install
            mountPath: /opt/trino/conf
        env:
        - name: S3_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: s3-vibrant-dragon
              key: id
        - name: S3_ACCESS_KEY_SECRET
          valueFrom:
            secretKeyRef:
              name: s3-vibrant-dragon
              key: secret
      containers:
      - env:
        - name: HIVE_METASTORE_HOST
          value: metastore
        - name: HIVE_METASTORE_PORT
          value: "9083"
        - name: S3_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: s3-vibrant-dragon
              key: id
        - name: S3_ACCESS_KEY_SECRET
          valueFrom:
            secretKeyRef:
              name: s3-vibrant-dragon
              key: secret
        image: scienz/walden-trino:latest
        imagePullPolicy: "Always"
        name: trino2-coordinator
        ports:
        - containerPort: 8080
        resources: {}
        volumeMounts:
          - name: pre-install
            mountPath: /trino-server-356/etc
      restartPolicy: Always
      serviceAccountName: ""
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: trino2-worker
  name: trino2-worker
  namespace: default
spec:
  serviceName: "trino2-worker"
  replicas: 4
  selector:
    matchLabels:
      app: trino2-worker
  template:
    metadata:
      labels:
        app: trino2-worker
    spec:
      nodeSelector:
        kubernetes.io/arch: amd64
        role: trino
      volumes:
        - name: properties-vol
          configMap:
            name: properties-trino2
        - name: pre-install
          emptyDir: {}
        - name: mem
          emptyDir:
            medium: "Memory"
            sizeLimit: 1G
      terminationGracePeriodSeconds: 10
      initContainers:
      - name: copy-ro-scripts
        image: busybox
        command:
          - sh
          - -c
          - |
            cp /conf/node.properties.template /opt/trino/conf/ &&
            cp /conf/jvm.config /opt/trino/conf/ &&
            cp /conf/config.properties.template /opt/trino/conf/ &&
            mkdir -p /opt/trino/conf/catalog &&
            cp /conf/hive.properties /opt/trino/conf/catalog &&
            cp /conf/postgresql.properties /opt/trino/conf/catalog &&
            cp /conf/thrift.properties /opt/trino/conf/catalog &&
            cp /conf/core-site.xml /opt/trino/conf/catalog &&
            sed -i "s#__S3_ACCESS_KEY_ID#$S3_ACCESS_KEY_ID#g"  /opt/trino/conf/catalog/core-site.xml &&
            sed -i "s#__S3_ACCESS_KEY_SECRET#$S3_ACCESS_KEY_SECRET#g"  /opt/trino/conf/catalog/core-site.xml &&
            sed -i "s#__S3_ACCESS_KEY_ID#$S3_ACCESS_KEY_ID#g"  /opt/trino/conf/catalog/hive.properties &&
            sed -i "s#__S3_ACCESS_KEY_SECRET#$S3_ACCESS_KEY_SECRET#g"  /opt/trino/conf/catalog/hive.properties &&
            sed -i "s#__S3_ACCESS_KEY_ID#$S3_ACCESS_KEY_ID#g"  /opt/trino/conf/catalog/postgresql.properties &&
            sed -i "s#__S3_ACCESS_KEY_SECRET#$S3_ACCESS_KEY_SECRET#g"  /opt/trino/conf/catalog/postgresql.properties &&
            sed -i "s#__S3_ACCESS_KEY_ID#$S3_ACCESS_KEY_ID#g"  /opt/trino/conf/catalog/thrift.properties &&
            sed -i "s#__S3_ACCESS_KEY_SECRET#$S3_ACCESS_KEY_SECRET#g"  /opt/trino/conf/catalog/thrift.properties &&
            echo 'connector.name=tpch' > /opt/trino/conf/catalog/tpch.properties
        volumeMounts:
          - name: properties-vol
            mountPath: /conf
          - name: pre-install
            mountPath: /opt/trino/conf
        env:
        - name: S3_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: s3-vibrant-dragon
              key: id
        - name: S3_ACCESS_KEY_SECRET
          valueFrom:
            secretKeyRef:
              name: s3-vibrant-dragon
              key: secret
      containers:
      - env:
        - name: HIVE_METASTORE_HOST
          value: metastore
        - name: HIVE_METASTORE_PORT
          value: "9083"
        - name: S3_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: s3-vibrant-dragon
              key: id
        - name: S3_ACCESS_KEY_SECRET
          valueFrom:
            secretKeyRef:
              name: s3-vibrant-dragon
              key: secret
        image: scienz/walden-trino:latest
        imagePullPolicy: "Always"
        name: trino-worker
        ports:
        - containerPort: 8080
        resources: {}
        volumeMounts:
          - name: pre-install
            mountPath: /trino-server-356/etc
      restartPolicy: Always
      serviceAccountName: ""
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: trino-coordinator
  name: trino-coordinator-headless
  namespace: default
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: "8080"
    port: 8080
    targetPort: 8080
  selector:
    app: trino-coordinator
status:
  loadBalancer: {}